// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/julioc98/ledger/app/service/api/v1"
	"sync"
)

// Ensure, that BalanceUseCaseMock does implement v1.BalanceUseCase.
// If this is not the case, regenerate this file with moq.
var _ v1.BalanceUseCase = &BalanceUseCaseMock{}

// BalanceUseCaseMock is a mock implementation of v1.BalanceUseCase.
//
//	func TestSomethingThatUsesBalanceUseCase(t *testing.T) {
//
//		// make and configure a mocked v1.BalanceUseCase
//		mockedBalanceUseCase := &BalanceUseCaseMock{
//			BalanceFunc: func(ctx context.Context, account string) (int64, error) {
//				panic("mock out the Balance method")
//			},
//		}
//
//		// use mockedBalanceUseCase in code that requires v1.BalanceUseCase
//		// and then make assertions.
//
//	}
type BalanceUseCaseMock struct {
	// BalanceFunc mocks the Balance method.
	BalanceFunc func(ctx context.Context, account string) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Balance holds details about calls to the Balance method.
		Balance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account string
		}
	}
	lockBalance sync.RWMutex
}

// Balance calls BalanceFunc.
func (mock *BalanceUseCaseMock) Balance(ctx context.Context, account string) (int64, error) {
	callInfo := struct {
		Ctx     context.Context
		Account string
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockBalance.Lock()
	mock.calls.Balance = append(mock.calls.Balance, callInfo)
	mock.lockBalance.Unlock()
	if mock.BalanceFunc == nil {
		var (
			nOut   int64
			errOut error
		)
		return nOut, errOut
	}
	return mock.BalanceFunc(ctx, account)
}

// BalanceCalls gets all the calls that were made to Balance.
// Check the length with:
//
//	len(mockedBalanceUseCase.BalanceCalls())
func (mock *BalanceUseCaseMock) BalanceCalls() []struct {
	Ctx     context.Context
	Account string
} {
	var calls []struct {
		Ctx     context.Context
		Account string
	}
	mock.lockBalance.RLock()
	calls = mock.calls.Balance
	mock.lockBalance.RUnlock()
	return calls
}
